import { useWallet } from "@solana/wallet-adapter-react";
import type { NextPage } from "next";
import React, { useState, useMemo } from "react";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import {
  ConnectionProvider,
  WalletProvider,
} from "@solana/wallet-adapter-react";
import { WalletAdapterNetwork } from "@solana/wallet-adapter-base";
import {
  CoinbaseWalletAdapter,
  GlowWalletAdapter,
  PhantomWalletAdapter,
  SlopeWalletAdapter,
  SolflareWalletAdapter,
  TorusWalletAdapter,
} from "@solana/wallet-adapter-wallets";
import {
  WalletModalProvider,
  WalletDisconnectButton,
  WalletMultiButton,
} from "@solana/wallet-adapter-react-ui";
import { Connection, clusterApiUrl, Keypair, Signer } from "@solana/web3.js";
import {
  createDefaultAuthorizationResultCache,
  SolanaMobileWalletAdapter,
} from "@solana-mobile/wallet-adapter-mobile";
import { signTransactionFromFrontend, confirmTransactionFromFrontend } from "../utils/transaction-signer";
import { decode } from "bs58";
import ErrorComponent from "../components/ErrorComponent";

// Default styles that can be overridden by your app
require("@solana/wallet-adapter-react-ui/styles.css");

const Home: NextPage = () => {
  const [privateKeys, setPrivateKeys] = useState([{ id: 1, privateKey: '' }]);
  // The network can be set to 'devnet', 'testnet', or 'mainnet-beta'.
  const network = WalletAdapterNetwork.Devnet;

  // You can also provide a custom RPC endpoint.
  const endpoint = useMemo(() => clusterApiUrl(network), [network]);
  
  const wallets = useMemo(
    () => [
      new SolanaMobileWalletAdapter({
        appIdentity: { name: "Solana Wallet Adapter App" },
        authorizationResultCache: createDefaultAuthorizationResultCache(),
      }),
      new CoinbaseWalletAdapter({ network }),
      new PhantomWalletAdapter({ network }),
      new GlowWalletAdapter({ network }),
      new SlopeWalletAdapter({ network }),
      new SolflareWalletAdapter({ network }),
      new TorusWalletAdapter(),
    ],
    [network]
  );
  const [response, setResponse] = useState<string | any>();
  const [isErrorOccured, setError] = useState<boolean | any>();
  const [isSuccess, setSuccess] = useState<boolean | any>();
  const connection = new Connection(clusterApiUrl(network), 'confirmed');

  const { publicKey, wallet, signTransaction } = useWallet();

  const addField = (event: any) => {
    setPrivateKeys([...privateKeys, { id: Math.floor(
      Math.random() * 100 + 1
    ), privateKey: '' }]);
  }

  const handleSubmit = async (event: any) => {
    try {
    // Stop the form from submitting and refreshing the page.
    event.preventDefault();
    const encodedTransaction = event.target.encoded_transaction.value as string;
    let transaction: string;

    if (privateKeys[0].privateKey !== '') {
      const signer = privateKeys.map((key) => {
        const signer = Keypair.fromSecretKey(decode(key.privateKey)) as Signer;
        return signer;
      })
      transaction = await signTransactionFromFrontend(encodedTransaction, signer);
    } else {
      transaction = encodedTransaction;
    }

    if (wallet !== null && typeof signTransaction !== 'undefined') {
      const shyftWallet = {
        wallet,
        signTransaction,
      }
      const completedTransaction = await confirmTransactionFromFrontend(connection, transaction, shyftWallet);
      setResponse(completedTransaction);
      setError(false);
      setSuccess(true)
    } else {
      setResponse('Some error occured');
      setError(true);
      setSuccess(false)
    }
  } catch(err: any) {
    console.log(err);
    setResponse(JSON.stringify(err.stack));
    setError(true)
    setSuccess(false)
  }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <ConnectionProvider endpoint={endpoint}>
        <WalletProvider wallets={wallets} autoConnect>
          <WalletModalProvider>
            <div className={styles.walletButtons}>
              <WalletMultiButton />
              <WalletDisconnectButton />
            </div>
            {/* Your app's components go here, nested within the context providers. */}
          </WalletModalProvider>
        </WalletProvider>
      </ConnectionProvider>
      <div>
        <h3>
          Wallet Address: <code>{publicKey?.toBase58()}</code>
        </h3>
        <form onSubmit={handleSubmit}>
          {privateKeys.map((key, index) => (
                    <div key={index} className="form-group">
                    <label>Private key of other signer</label>
                    <textarea
                      name="private_keys"
                      className="form-control"
                      id="private_keys"
                      placeholder="Enter Private Key (Optional)"
                      value={key.privateKey}
                      onChange={(e) => {
                        const privateKey = e.target.value;
                        setPrivateKeys((currentField) =>
                        currentField.map((x) =>
                            x.id === key.id
                              ? {
                                  ...x,
                                  privateKey,
                                }
                              : x
                          )
                        );
                      }}
                    />
                  </div>
          ))}
          <button className="bg-warning" type="button" onClick={addField}>Add more</button>
          <div className="form-group">
            <label>Encoded Transaction</label>
            <textarea
              name="encoded_transaction"
              className="form-control"
              id="encoded_transaction"
              placeholder="Enter transaction"
            />
          </div>
          <button type="submit" className="btn btn-warning">
            Submit
          </button>
        </form>
        {
          isErrorOccured ? (<><hr /><ErrorComponent err={response} /></>) : (<></>)
        }

        {
          isSuccess ? (<><hr /><div className="alert alert-success" role="alert">Transaction signature: <code>{response}</code>
          </div></>) : (<></>)
        }
        
      </div>
      <main className={styles.main}></main>
    </div>
  );
};

export default Home;
